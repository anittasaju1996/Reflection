How did viewing a diff between two versions of a file help you see the bug 
that was introduced?
 
 	The changes made were shown side by side helped in correcting typos.
    
How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    We can easily see where we made mistakes by comparing previous versions available to us

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Commits only when a logical change is made, so history is reasonable and managable.
    Cons: As its manual, a user may forget to commit, or the commit time may be too big.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because Git is code oriented and here mulitple programs are interelated. So the requierement of multiple file to be saved for each commit arises. While in non code oriented program like Google Docs such requierement isnt needed so they treat each file seperately

How can you use the commands git log and git diff to view the history of files?

    git log just gives information about the commit histories and the ids of each commit. The git diff uses the ids to display the changes made in the two commits.

How might using version control make you more confident to make changes that
could break something?

    As the previous versions as stored, we can take risks and explore more leaving behind the fear of breaking the program.

Now that you have your workspace set up, what do you want to try using Git for?

   Try to create a program in baby steps to see the actual usageog git
